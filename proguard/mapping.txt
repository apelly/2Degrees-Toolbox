biz.shadowservices.DegreesToolbox.BalancePreferencesActivity -> biz.shadowservices.DegreesToolbox.BalancePreferencesActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
biz.shadowservices.DegreesToolbox.DataFetcher -> biz.shadowservices.DegreesToolbox.h:
    java.lang.String TAG -> a
    void updateData(android.content.Context,boolean) -> a
biz.shadowservices.DegreesToolbox.DataFetcherLoginDetailsException -> biz.shadowservices.DegreesToolbox.g:
biz.shadowservices.DegreesToolbox.DateFormatters -> biz.shadowservices.DegreesToolbox.e:
    java.text.SimpleDateFormat ISO8601FORMAT -> a
    java.text.SimpleDateFormat ISO8601DATEONLYFORMAT -> b
    java.text.SimpleDateFormat EXPIRESDATE -> c
    java.text.SimpleDateFormat LASTUPDATETIME -> d
    java.text.SimpleDateFormat LASTUPDATEDATE -> e
    java.text.SimpleDateFormat DATETIME -> f
    boolean isSameDay(java.util.Date,java.util.Date) -> a
biz.shadowservices.DegreesToolbox.HttpClientSingleton -> biz.shadowservices.DegreesToolbox.n:
    org.apache.http.client.HttpClient instance -> a
    int TIMEOUT -> b
    org.apache.http.client.HttpClient getInstance() -> a
biz.shadowservices.DegreesToolbox.HttpGetter -> biz.shadowservices.DegreesToolbox.a:
    java.lang.String TAG -> a
    java.lang.String response -> b
    org.apache.http.client.methods.HttpGet httpget -> c
    java.lang.String execute() -> a
biz.shadowservices.DegreesToolbox.HttpPoster -> biz.shadowservices.DegreesToolbox.c:
    java.lang.String TAG -> a
    java.lang.String response -> b
    org.apache.http.client.methods.HttpPost httppost -> c
    java.lang.String execute() -> a
biz.shadowservices.DegreesToolbox.PhoneBalanceDBOpenHelper -> biz.shadowservices.DegreesToolbox.d:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
biz.shadowservices.DegreesToolbox.PhoneBalanceMain -> biz.shadowservices.DegreesToolbox.PhoneBalanceMain:
    java.lang.String TAG -> b
    biz.shadowservices.DegreesToolbox.PhoneBalanceMain$UpdateReciever reciever -> c
    int TXTPACK -> d
    int NATDATA -> e
    int BBZDATA -> f
    int TALKPACK -> g
    java.lang.CharSequence[] SMSCategory -> h
    java.lang.CharSequence[] SMSNATNames -> i
    java.lang.String[] SMSNATContent -> j
    java.lang.CharSequence[] SMSBBNames -> k
    java.lang.String[] SMSBBContent -> l
    java.lang.CharSequence[] SMSTalkNames -> m
    java.lang.String[] SMSTalkContent -> n
    android.app.ProgressDialog progressDialog -> a
    android.view.View$OnClickListener buyPackListener -> o
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onResume() -> onResume
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onPause() -> onPause
    void askToSend(java.lang.CharSequence,java.lang.String) -> a
    void refreshData() -> a
    java.lang.CharSequence[] access$0(biz.shadowservices.DegreesToolbox.PhoneBalanceMain) -> a
    java.lang.CharSequence[] access$1(biz.shadowservices.DegreesToolbox.PhoneBalanceMain) -> b
    java.lang.String[] access$2(biz.shadowservices.DegreesToolbox.PhoneBalanceMain) -> c
    void access$3(biz.shadowservices.DegreesToolbox.PhoneBalanceMain,java.lang.CharSequence[],java.lang.String[]) -> a
    java.lang.CharSequence[] access$4(biz.shadowservices.DegreesToolbox.PhoneBalanceMain) -> d
    java.lang.String[] access$5(biz.shadowservices.DegreesToolbox.PhoneBalanceMain) -> e
    java.lang.CharSequence[] access$6(biz.shadowservices.DegreesToolbox.PhoneBalanceMain) -> f
    java.lang.String[] access$7(biz.shadowservices.DegreesToolbox.PhoneBalanceMain) -> g
    void access$8(biz.shadowservices.DegreesToolbox.PhoneBalanceMain,java.lang.String) -> a
biz.shadowservices.DegreesToolbox.PhoneBalanceMain$1 -> biz.shadowservices.DegreesToolbox.j:
    biz.shadowservices.DegreesToolbox.PhoneBalanceMain this$0 -> a
    void onClick(android.view.View) -> onClick
biz.shadowservices.DegreesToolbox.PhoneBalanceMain$1$1 -> biz.shadowservices.DegreesToolbox.f:
    biz.shadowservices.DegreesToolbox.PhoneBalanceMain$1 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
biz.shadowservices.DegreesToolbox.PhoneBalanceMain$2 -> biz.shadowservices.DegreesToolbox.k:
    biz.shadowservices.DegreesToolbox.PhoneBalanceMain this$0 -> a
    java.lang.CharSequence[] val$names -> b
    java.lang.String[] val$content -> c
    void onClick(android.content.DialogInterface,int) -> onClick
biz.shadowservices.DegreesToolbox.PhoneBalanceMain$3 -> biz.shadowservices.DegreesToolbox.l:
    biz.shadowservices.DegreesToolbox.PhoneBalanceMain this$0 -> a
    java.lang.String val$content -> b
    void onClick(android.content.DialogInterface,int) -> onClick
biz.shadowservices.DegreesToolbox.PhoneBalanceMain$4 -> biz.shadowservices.DegreesToolbox.m:
    biz.shadowservices.DegreesToolbox.PhoneBalanceMain this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
biz.shadowservices.DegreesToolbox.PhoneBalanceMain$UpdateReciever -> biz.shadowservices.DegreesToolbox.PhoneBalanceMain$UpdateReciever:
    biz.shadowservices.DegreesToolbox.PhoneBalanceMain activity -> a
    biz.shadowservices.DegreesToolbox.PhoneBalanceMain this$0 -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
biz.shadowservices.DegreesToolbox.PhoneBalanceWidget -> biz.shadowservices.DegreesToolbox.PhoneBalanceWidget:
    java.lang.String TAG -> a
    int LINELIMIT -> b
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    android.widget.RemoteViews buildUpdate(android.content.Context,boolean) -> a
biz.shadowservices.DegreesToolbox.SetupWizard -> biz.shadowservices.DegreesToolbox.SetupWizard:
    android.view.View$OnClickListener goButtonListener -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
biz.shadowservices.DegreesToolbox.SetupWizard$1 -> biz.shadowservices.DegreesToolbox.i:
    biz.shadowservices.DegreesToolbox.SetupWizard this$0 -> a
    void onClick(android.view.View) -> onClick
biz.shadowservices.DegreesToolbox.UpdateWidgetService -> biz.shadowservices.DegreesToolbox.UpdateWidgetService:
    java.lang.String TAG -> b
    java.lang.String NEWDATA -> a
    boolean isThreadRunning -> c
    java.lang.Object lock -> d
    boolean force -> e
    android.os.IBinder mBinder -> f
    void onStart(android.content.Intent,int) -> onStart
    void run() -> run
    android.os.IBinder onBind(android.content.Intent) -> onBind
biz.shadowservices.DegreesToolbox.UpdateWidgetService$LocalBinder -> biz.shadowservices.DegreesToolbox.b:
    biz.shadowservices.DegreesToolbox.UpdateWidgetService this$0 -> a
org.apache.commons.io.IOUtils -> a.b.a.a.a:
    char DIR_SEPARATOR -> a
    java.lang.String LINE_SEPARATOR -> b
    void copy(java.io.InputStream,java.io.Writer) -> a
    long copyLarge(java.io.Reader,java.io.Writer) -> a
org.apache.commons.io.output.StringBuilderWriter -> a.b.a.a.a.a:
    java.lang.StringBuilder builder -> a
    java.io.Writer append(char) -> append
    java.io.Writer append(java.lang.CharSequence) -> append
    java.io.Writer append(java.lang.CharSequence,int,int) -> append
    void close() -> close
    void flush() -> flush
    void write(java.lang.String) -> write
    void write(char[],int,int) -> write
    java.lang.String toString() -> toString
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
org.jsoup.helper.StringUtil -> a.a.d.a:
    java.lang.String[] padding -> a
    java.lang.String padding(int) -> a
    boolean isBlank(java.lang.String) -> a
    java.lang.String normaliseWhitespace(java.lang.String) -> b
org.jsoup.helper.Validate -> a.a.d.b:
    void notNull(java.lang.Object) -> a
    void notEmpty(java.lang.String) -> a
org.jsoup.nodes.Attribute -> a.a.a.n:
    java.lang.String key -> a
    java.lang.String value -> b
    java.lang.String getKey() -> a
    java.lang.String getValue() -> b
    void html(java.lang.StringBuilder,org.jsoup.nodes.Document$OutputSettings) -> a
    java.lang.String toString() -> toString
    org.jsoup.nodes.Attribute createFromEncoded(java.lang.String,java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
org.jsoup.nodes.Attributes -> a.a.a.i:
    java.util.LinkedHashMap attributes -> a
    java.lang.String get(java.lang.String) -> a
    void put(java.lang.String,java.lang.String) -> a
    void put(org.jsoup.nodes.Attribute) -> a
    boolean hasKey(java.lang.String) -> b
    java.util.Iterator iterator() -> iterator
    void html(java.lang.StringBuilder,org.jsoup.nodes.Document$OutputSettings) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jsoup.nodes.Comment -> a.a.a.f:
    java.lang.String nodeName() -> a
    void outerHtmlHead(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> a
    void outerHtmlTail(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> b
    java.lang.String toString() -> toString
org.jsoup.nodes.DataNode -> a.a.a.o:
    java.lang.String nodeName() -> a
    void outerHtmlHead(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> a
    void outerHtmlTail(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> b
    java.lang.String toString() -> toString
org.jsoup.nodes.Document -> a.a.a.k:
    org.jsoup.nodes.Document$OutputSettings outputSettings -> f
    org.jsoup.nodes.Element body() -> n
    org.jsoup.nodes.Document normalise() -> h
    void normalise(org.jsoup.nodes.Element) -> a
    org.jsoup.nodes.Element findFirstElementByTagName(java.lang.String,org.jsoup.nodes.Node) -> a
    java.lang.String outerHtml() -> i
    java.lang.String nodeName() -> a
    org.jsoup.nodes.Document$OutputSettings outputSettings() -> j
org.jsoup.nodes.Document$OutputSettings -> a.a.a.m:
    org.jsoup.nodes.Entities$EscapeMode escapeMode -> a
    java.nio.charset.Charset charset -> b
    java.nio.charset.CharsetEncoder charsetEncoder -> c
    boolean prettyPrint -> d
    int indentAmount -> e
    org.jsoup.nodes.Document this$0 -> f
    org.jsoup.nodes.Entities$EscapeMode escapeMode() -> a
    java.nio.charset.CharsetEncoder encoder() -> b
    boolean prettyPrint() -> c
    int indentAmount() -> d
org.jsoup.nodes.Element -> a.a.a.g:
    org.jsoup.parser.Tag tag -> f
    java.util.Set classNames -> g
    java.lang.String nodeName() -> a
    java.lang.String tagName() -> b
    org.jsoup.parser.Tag tag() -> c
    org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node) -> a
    org.jsoup.nodes.Element prependChild(org.jsoup.nodes.Node) -> b
    org.jsoup.nodes.Element appendElement(java.lang.String) -> a
    org.jsoup.nodes.Element prependElement(java.lang.String) -> a_
    org.jsoup.select.Elements getElementsByTag(java.lang.String) -> b_
    org.jsoup.nodes.Element getElementById(java.lang.String) -> d
    org.jsoup.select.Elements getElementsByClass(java.lang.String) -> e
    org.jsoup.select.Elements getElementsByAttributeValue(java.lang.String,java.lang.String) -> a
    java.lang.String text() -> d
    void text(java.lang.StringBuilder) -> a
    boolean preserveWhitespace() -> e
    boolean hasClass(java.lang.String) -> f
    void outerHtmlHead(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> a
    void outerHtmlTail(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> b
    java.lang.String html() -> f
    void html(java.lang.StringBuilder) -> c
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.jsoup.nodes.Node parent() -> g
org.jsoup.nodes.Entities -> a.a.a.l:
    java.util.Map full -> a
    java.util.Map xhtmlByVal -> b
    java.util.Map baseByVal -> c
    java.util.Map fullByVal -> d
    java.util.regex.Pattern unescapePattern -> e
    java.lang.Object[][] xhtmlArray -> f
    java.lang.Object[][] baseArray -> g
    java.lang.Object[][] fullArray -> h
    java.lang.String escape(java.lang.String,org.jsoup.nodes.Document$OutputSettings) -> a
    java.lang.String unescape(java.lang.String) -> a
    java.util.Map access$000() -> a
    java.util.Map access$100() -> b
    java.util.Map access$200() -> c
org.jsoup.nodes.Entities$EscapeMode -> a.a.a.c:
    org.jsoup.nodes.Entities$EscapeMode xhtml -> b
    org.jsoup.nodes.Entities$EscapeMode base -> a
    org.jsoup.nodes.Entities$EscapeMode extended -> c
    java.util.Map map -> d
    org.jsoup.nodes.Entities$EscapeMode[] $VALUES -> e
    org.jsoup.nodes.Entities$EscapeMode[] values() -> values
    org.jsoup.nodes.Entities$EscapeMode valueOf(java.lang.String) -> valueOf
    java.util.Map getMap() -> a
org.jsoup.nodes.Evaluator -> a.a.a.a:
    boolean matches(org.jsoup.nodes.Element) -> a
org.jsoup.nodes.Evaluator$AttributeKeyPair -> a.a.a.r:
    java.lang.String key -> a
    java.lang.String value -> b
org.jsoup.nodes.Evaluator$AttributeWithValue -> a.a.a.q:
    boolean matches(org.jsoup.nodes.Element) -> a
org.jsoup.nodes.Evaluator$Class -> a.a.a.h:
    java.lang.String className -> a
    boolean matches(org.jsoup.nodes.Element) -> a
org.jsoup.nodes.Evaluator$Id -> a.a.a.b:
    java.lang.String id -> a
    boolean matches(org.jsoup.nodes.Element) -> a
org.jsoup.nodes.Evaluator$Tag -> a.a.a.d:
    java.lang.String tagName -> a
    boolean matches(org.jsoup.nodes.Element) -> a
org.jsoup.nodes.Node -> a.a.a.s:
    org.jsoup.nodes.Node parentNode -> a
    java.util.List childNodes -> b
    org.jsoup.nodes.Attributes attributes -> c
    java.lang.String baseUri -> d
    int siblingIndex -> e
    java.lang.String nodeName() -> a
    java.lang.String attr(java.lang.String) -> c_
    boolean hasAttr(java.lang.String) -> b
    void setBaseUri(java.lang.String) -> g
    java.lang.String absUrl(java.lang.String) -> c
    org.jsoup.nodes.Node childNode$5b77efbe() -> k
    java.util.List childNodes() -> l
    org.jsoup.nodes.Node parent() -> g
    org.jsoup.nodes.Document ownerDocument() -> b
    void removeChild(org.jsoup.nodes.Node) -> c
    void addChildren(org.jsoup.nodes.Node[]) -> a
    void addChildren$2eaa07bd(org.jsoup.nodes.Node[]) -> b
    void reparentChild(org.jsoup.nodes.Node) -> a
    void reindexChildren() -> c
    org.jsoup.nodes.Node nextSibling() -> m
    java.lang.String outerHtml() -> i
    void outerHtml(java.lang.StringBuilder) -> b
    void outerHtmlHead(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> a
    void outerHtmlTail(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> b
    java.lang.String toString() -> toString
    void indent(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jsoup.nodes.Node$OuterHtmlVisitor -> a.a.a.j:
    java.lang.StringBuilder accum -> a
    org.jsoup.nodes.Document$OutputSettings out -> b
    void head(org.jsoup.nodes.Node,int) -> a
    void tail(org.jsoup.nodes.Node,int) -> b
org.jsoup.nodes.TextNode -> a.a.a.p:
    java.lang.String text -> f
    java.lang.String nodeName() -> a
    java.lang.String getWholeText() -> b
    void outerHtmlHead(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> a
    void outerHtmlTail(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> b
    java.lang.String toString() -> toString
    org.jsoup.nodes.TextNode createFromEncoded(java.lang.String,java.lang.String) -> a
    boolean lastCharIsWhitespace(java.lang.StringBuilder) -> a
    void ensureAttributes() -> c
    java.lang.String attr(java.lang.String) -> c_
    boolean hasAttr(java.lang.String) -> b
    java.lang.String absUrl(java.lang.String) -> c
org.jsoup.nodes.XmlDeclaration -> a.a.a.e:
    boolean isProcessingInstruction -> f
    java.lang.String nodeName() -> a
    void outerHtmlHead(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> a
    void outerHtmlTail(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings) -> b
    java.lang.String toString() -> toString
org.jsoup.parser.Parser -> a.a.c.a:
    org.jsoup.parser.Tag htmlTag -> a
    org.jsoup.parser.Tag headTag -> b
    org.jsoup.parser.Tag bodyTag -> c
    org.jsoup.parser.Tag titleTag -> d
    org.jsoup.parser.Tag textareaTag -> e
    java.util.LinkedList stack -> f
    org.jsoup.parser.TokenQueue tq -> g
    org.jsoup.nodes.Document doc -> h
    java.lang.String baseUri -> i
    boolean relaxed -> j
    org.jsoup.nodes.Document parse(java.lang.String,java.lang.String) -> a
    org.jsoup.nodes.Attribute parseAttribute() -> a
    org.jsoup.nodes.Element addChildToParent(org.jsoup.nodes.Element,boolean) -> a
    org.jsoup.nodes.Element popStackToClose(org.jsoup.parser.Tag) -> a
    org.jsoup.nodes.Element last() -> b
org.jsoup.parser.Tag -> a.a.c.b:
    java.util.Map tags -> a
    org.jsoup.parser.Tag defaultAncestor -> b
    java.lang.String tagName -> c
    boolean knownTag -> d
    boolean isBlock -> e
    boolean canContainBlock -> f
    boolean canContainInline -> g
    boolean optionalClosing -> h
    boolean empty -> i
    boolean selfClosing -> j
    boolean preserveWhitespace -> k
    java.util.List ancestors -> l
    java.util.List excludes -> m
    java.util.List ignoreEndTags -> n
    boolean directDescendant -> o
    boolean limitChildren -> p
    java.lang.String getName() -> a
    org.jsoup.parser.Tag valueOf(java.lang.String) -> a
    boolean canContain(org.jsoup.parser.Tag) -> a
    boolean isBlock() -> b
    boolean canContainBlock() -> c
    boolean isData() -> d
    boolean isEmpty() -> e
    boolean isSelfClosing() -> f
    boolean isKnownTag() -> g
    boolean preserveWhitespace() -> h
    org.jsoup.parser.Tag getImplicitParent() -> i
    boolean requiresSpecificParent() -> j
    boolean isValidParent(org.jsoup.parser.Tag) -> b
    boolean isValidAncestor(org.jsoup.parser.Tag) -> c
    boolean isIgnorableEndTag(org.jsoup.parser.Tag) -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.jsoup.parser.Tag createBlock(java.lang.String) -> b
    org.jsoup.parser.Tag createInline(java.lang.String) -> c
    org.jsoup.parser.Tag register(org.jsoup.parser.Tag) -> e
    org.jsoup.parser.Tag setContainInlineOnly() -> l
    org.jsoup.parser.Tag setContainDataOnly() -> m
    org.jsoup.parser.Tag setEmpty() -> n
    org.jsoup.parser.Tag setAncestor(java.lang.String[]) -> a
    org.jsoup.parser.Tag setExcludes(java.lang.String[]) -> b
    org.jsoup.parser.Tag setIgnoreEnd(java.lang.String[]) -> c
    org.jsoup.parser.Tag setParent(java.lang.String[]) -> d
    org.jsoup.parser.Tag setSelfClosing() -> k
org.jsoup.parser.TokenQueue -> a.a.c.c:
    java.lang.String queue -> a
    int pos -> b
    java.lang.Character ESC -> c
    boolean isEmpty() -> a
    int remainingLength() -> j
    java.lang.Character peek() -> b
    boolean matches(java.lang.String) -> a
    boolean matchesCS(java.lang.String) -> b
    boolean matchesAny(java.lang.String[]) -> a
    boolean matchesAny(char[]) -> a
    boolean matchesStartTag() -> c
    boolean matchChomp(java.lang.String) -> c
    boolean matchesWhitespace() -> d
    boolean matchesWord() -> k
    void advance() -> e
    java.lang.Character consume() -> f
    void consume(java.lang.String) -> d
    java.lang.String consumeTo(java.lang.String) -> e
    java.lang.String chompTo(java.lang.String) -> f
    java.lang.String chompToIgnoreCase(java.lang.String) -> g
    boolean consumeWhitespace() -> g
    java.lang.String consumeTagName() -> h
    java.lang.String consumeAttributeKey() -> i
    java.lang.String toString() -> toString
org.jsoup.select.Collector -> a.a.b.b:
    org.jsoup.select.Elements collect(org.jsoup.nodes.Evaluator,org.jsoup.nodes.Element) -> a
org.jsoup.select.Collector$Accumulator -> a.a.b.d:
    org.jsoup.select.Elements elements -> a
    org.jsoup.nodes.Evaluator eval -> b
    void head(org.jsoup.nodes.Node,int) -> a
    void tail(org.jsoup.nodes.Node,int) -> b
org.jsoup.select.Elements -> a.a.b.c:
    java.util.List contents -> a
    java.lang.String toString() -> toString
    org.jsoup.nodes.Element first() -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean add(org.jsoup.nodes.Element) -> a
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.jsoup.nodes.Element get(int) -> a
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    boolean add(java.lang.Object) -> add
org.jsoup.select.NodeTraversor -> a.a.b.a:
    org.jsoup.select.NodeVisitor visitor -> a
    void traverse(org.jsoup.nodes.Node) -> a
org.jsoup.select.NodeVisitor -> a.a.b.e:
    void head(org.jsoup.nodes.Node,int) -> a
    void tail(org.jsoup.nodes.Node,int) -> b
